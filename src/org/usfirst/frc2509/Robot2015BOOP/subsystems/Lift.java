// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2509.Robot2015BOOP.subsystems;

import org.usfirst.frc2509.Robot2015BOOP.RobotMap;
import org.usfirst.frc2509.Robot2015BOOP.commands.*;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.DigitalInput;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Lift extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController lMotor = RobotMap.liftLeftSpeedController;
    private final SpeedController rMotor = RobotMap.liftRightSpeedController;
    private final DigitalInput leftTop = RobotMap.LimitSwitch2;
    private final DigitalInput rightTop = RobotMap.LimitSwitch3;
    private final DigitalInput leftBottom = RobotMap.LimitSwitch1;
    private final DigitalInput rightBottom = RobotMap.LimitSwitch4;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
    }
    public void Up(){
    	while(leftTop.get()==false&&rightTop.get()==false){
    		lMotor.set(0.5);
    		rMotor.set(0.5);
    	}
    }
    public void Down(){
    	while(leftBottom.get()==false&&rightBottom.get()==false){
    		lMotor.set(-0.5);
    		rMotor.set(-0.5);
    		
    		}
    	}
    	public void Stop(){
    		lMotor.set(0);
    		rMotor.set(0);
    	}
    	public void CalibrateLeftUp(){
    		lMotor.set(0.5);
    	}
    	public void CalibrateRightUp(){
    		rMotor.set(0.5);
    	}
    	public void CalibrateLeftDown(){
    		lMotor.set(-0.5);
    	}
    	public void CalibrateRightDown(){
    		rMotor.set(-0.5);
    	}
    	public boolean getTopLimit(){
    		if(leftTop.get()==false&&rightTop.get()==false){
    				return false;
    		}else{
    				return true;
 
    		}
    	}
    	public boolean getBottomLimit(){
    		if(leftBottom.get()==false&&rightBottom.get()==false){
    				return false;
    		}else{
    				return true;
    			
    		}
    	}
	}
	
    	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new LiftStop());
        }
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    


